#!/usr/bin/env python3

from Crypto.Util.number import bytes_to_long,long_to_bytes 
from Crypto.Protocol.KDF import scrypt
from random import randint
from pwn import *
import hashlib, binascii

context.log_level = "Debug"

remote_ip,port = "gc1.eng.run" ,"31743"

io = remote(remote_ip,port)

re = lambda a: io.recv(a)
ru = lambda a: io.recvuntil(a)
s  = lambda a: io.send(a)
sl = lambda a: io.sendline(a)

IV = b"y3ll0w subm4r1n3"

def Genkey(secret):
 
    password = long_to_bytes(secret)
    salt = IV
    pswd = scrypt(password, salt, 16, N=2**14, r=8, p=1)
    
    key = binascii.hexlify(pswd[:16])

    return key

class PublicKey:

    def __init__(self, h, p, g, q):
        self.h = h
        self.p = p
        self.g = g
        self.q = q

class PrivateKey:

    def __init__(self, x, p, g, q):
        self.x = x
        self.p = p
        self.g = g
        self.q = q

def generate_key():

    p = P
    x = randint(2, p-2)
    g = G
    q = p - 1
    h = pow(g, x, p)

    pubkey = PublicKey(h, p, g, q)
    privkey = PrivateKey(x, p, g, q)

    return (pubkey, privkey)
  
ru("(p,g) = (")

P = int(ru(",7")[:-2])
G = 7
T_pub, T_priv = generate_key()

ru("alice: ")
a_pub = int(ru("\n"))

ru("Bob->\n")
sl(bytes(str(T_pub.h).encode()))

ru("bob: ")
b_pub = int(ru("\n"))

ru("send to Alice->\n")
sl(bytes(str(T_pub.h).encode()))

ru("Alice: ")
a_nonce = int(ru("\n"))

s = pow(a_pub,T_priv.x,P) ^ a_nonce
b_nonce = s ^ pow(b_pub,T_priv.x,P)

ru("Bob->\n")
sl(str(b_nonce))

key = Genkey(s)

ru("s->\n")
sl(str(key))

flag = ru("}")